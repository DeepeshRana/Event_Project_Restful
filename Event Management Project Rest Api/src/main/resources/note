import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.event.dto.EventDto;
import com.event.entity.Event;
import com.event.exception.ResourceNotFoundException;
import com.event.repo.EventRepo;

@Service
public class EventFilterServiceImpl implements EventFilterService {

    @Autowired
    private EventRepo eventRepo;

    @Autowired
    private ModelMapper modelMapper;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventFilterServiceImpl.class);

    @Override
    public List<EventDto> filterEventsByName(String eventName) {
        LOGGER.info("Filtering events by name: {}", eventName);

        List<Event> events = eventRepo.findByTitleContainingIgnoreCase(eventName);
        LOGGER.info("Filtered {} events by name: {}", events.size(), eventName);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }

    @Override
    public List<EventDto> filterEventsByDate(LocalDateTime dateTime) {
        LOGGER.info("Filtering events after date: {}", dateTime);

        List<Event> events = eventRepo.findByLocalDateTimeAfter(dateTime);
        LOGGER.info("Filtered {} events after date: {}", events.size(), dateTime);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }

    @Override
    public List<EventDto> filterEventsByOrganizerId(Integer organizerId) {
        LOGGER.info("Filtering events by organizer ID: {}", organizerId);

        List<Event> events = eventRepo.findByOrganiser_OrganiserId(organizerId);
        LOGGER.info("Filtered {} events by organizer ID: {}", events.size(), organizerId);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }
}


import java.time.LocalDateTime;
import java.util.List;
import com.event.dto.EventDto;

public interface EventFilterService {

    List<EventDto> filterEventsByName(String eventName);

    List<EventDto> filterEventsByDate(LocalDateTime dateTime);

    List<EventDto> filterEventsByOrganizerId(Integer organizerId);
}


import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.event.dto.EventDto;
import com.event.entity.Event;
import com.event.exception.ResourceNotFoundException;
import com.event.repo.EventRepo;
import com.event.repo.OrganiserRepo;
import com.event.service.EventService;

@Service
public class EventServiceImpl implements EventService {

    @Autowired
    private EventRepo eventRepo;

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private OrganiserRepo orgRepo;

    private static final Logger LOGGER = LoggerFactory.getLogger(EventServiceImpl.class);

    @Override
    public EventDto createEvent(EventDto eventDto, Integer orgId) {
        // Implementation for creating an event
    }

    @Override
    public EventDto updateEvent(EventDto eventDto, Integer eventId) {
        // Implementation for updating an event
    }

    @Override
    public List<EventDto> findByName(String eventName) {
        LOGGER.info("Retrieving events by name: {}", eventName);

        List<Event> events = eventRepo.findByTitleContainingIgnoreCase(eventName);
        LOGGER.info("Retrieved {} events with name: {}", events.size(), eventName);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }

    @Override
    public List<EventDto> findByDate(LocalDateTime dateTime) {
        LOGGER.info("Retrieving events after date: {}", dateTime);

        List<Event> events = eventRepo.findByLocalDateTimeAfter(dateTime);
        LOGGER.info("Retrieved {} events after date: {}", events.size(), dateTime);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }

    @Override
    public List<EventDto> findByOrganizerId(Integer organiserId) {
        LOGGER.info("Retrieving events by organizer ID: {}", organiserId);

        List<Event> events = eventRepo.findByOrganiser_OrganiserId(organiserId);
        LOGGER.info("Retrieved {} events by organizer ID: {}", events.size(), organiserId);

        return events.stream().map(event -> modelMapper.map(event, EventDto.class)).collect(Collectors.toList());
    }

    // Other methods for CRUD operations
}


